/* GeneratedFormulaParser.java */
/* Generated By:JavaCC: Do not edit this line. GeneratedFormulaParser.java */
package org.pentaho.reporting.libraries.formula.parser;

import java.math.BigDecimal;
import java.util.ArrayList;

import org.pentaho.reporting.libraries.formula.lvalues.ContextLookup;
import org.pentaho.reporting.libraries.formula.lvalues.FormulaFunction;
import org.pentaho.reporting.libraries.formula.statement.IfStatement;
import org.pentaho.reporting.libraries.formula.lvalues.LValue;
import org.pentaho.reporting.libraries.formula.lvalues.PostfixTerm;
import org.pentaho.reporting.libraries.formula.lvalues.PrefixTerm;
import org.pentaho.reporting.libraries.formula.lvalues.StaticValue;
import org.pentaho.reporting.libraries.formula.lvalues.Term;
import org.pentaho.reporting.libraries.formula.lvalues.DefaultDataTable;
import org.pentaho.reporting.libraries.formula.operators.InfixOperator;
import org.pentaho.reporting.libraries.formula.operators.OperatorFactory;
import org.pentaho.reporting.libraries.formula.operators.PostfixOperator;
import org.pentaho.reporting.libraries.formula.operators.PrefixOperator;
import org.pentaho.reporting.libraries.formula.typing.coretypes.NumberType;
import org.pentaho.reporting.libraries.formula.typing.coretypes.TextType;
import org.pentaho.reporting.libraries.formula.lvalues.ParsePosition;

public abstract class GeneratedFormulaParser implements GeneratedFormulaParserConstants {

  protected GeneratedFormulaParser ()
  {
  }

  protected abstract OperatorFactory getOperatorFactory();

  protected ParsePosition createPosition(Token token)
  {
    return new ParsePosition
       (token.beginLine, token.beginColumn, token.endLine, token.endColumn);
  }

  final public LValue getStatement() throws ParseException {LValue retval = null;
    switch (jj_nt.kind) {
    case IF:{
      retval = getIfStatement();
      break;
      }
    case UNSIGNED_INTEGER:
    case L_PAREN:
    case L_BRACE:
    case PLUS:
    case MINUS:
    case NOT:
    case NULL:
    case IDENTIFIER:
    case STRING_LITERAL:
    case UNSIGNED_NUMERIC_LITERAL:{
      retval = getExpression();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public LValue getIfStatement() throws ParseException {LValue temp = null;
   IfStatement ifStatement = new IfStatement();
    jj_consume_token(IF);
    temp = getExpression();
ifStatement.setCondition(temp);
    jj_consume_token(THEN);
    temp = getStatement();
ifStatement.setThenStatement(temp);
    if (jj_2_1(2)) {
      jj_consume_token(ELSE);
      temp = getStatement();
ifStatement.setElseStatement(temp);
    } else {
      ;
    }
    jj_consume_token(END);
{if ("" != null) return ifStatement;}
    throw new Error("Missing return statement in function");
  }

  final public LValue getExpression() throws ParseException {LValue retval = null;
  Term term = null;
    retval = getLValue();
    switch (jj_nt.kind) {
    case PLUS:
    case MINUS:
    case MULT:
    case DIV:
    case POW:
    case EQUALS:
    case NOT_EQUALS:
    case LT_EQUALS:
    case GT_EQUALS:
    case LT:
    case GT:
    case CONCAT:
    case AND:
    case OR:{
      term = startTail(new Term(retval));
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case PLUS:
        case MINUS:
        case MULT:
        case DIV:
        case POW:
        case EQUALS:
        case NOT_EQUALS:
        case LT_EQUALS:
        case GT_EQUALS:
        case LT:
        case GT:
        case CONCAT:
        case AND:
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        term = startTail(term);
      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
if (term != null)
    {
      {if ("" != null) return term;}
    }
    {if ("" != null) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Term startTail(LValue retval) throws ParseException {LValue val = null;
  InfixOperator op = null;
  Term ex = null;
    op = getInfixOperator();
    val = getLValue();
if (retval instanceof Term)
      {
        ex = (Term) retval;
      }
      else
      {
        ex = new Term (retval);
      }
      ex.add (op, val);

      {if ("" != null) return ex;}
    throw new Error("Missing return statement in function");
  }

  final public LValue getLValue() throws ParseException {Token value = null;
  LValue retval = null;
  PrefixOperator prefixOp = null;
  PostfixOperator postfixOp = null;
    switch (jj_nt.kind) {
    case PLUS:
    case MINUS:
    case NOT:{
      prefixOp = getPrefixOperator();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case STRING_LITERAL:{
      value = jj_consume_token(STRING_LITERAL);
retval = new StaticValue (ParserTools.stripQuote(value.image), TextType.TYPE, createPosition(value));
      break;
      }
    case UNSIGNED_NUMERIC_LITERAL:{
      value = jj_consume_token(UNSIGNED_NUMERIC_LITERAL);
retval = new StaticValue (new BigDecimal (value.image), NumberType.GENERIC_NUMBER, createPosition(value));
      break;
      }
    case UNSIGNED_INTEGER:{
      value = jj_consume_token(UNSIGNED_INTEGER);
retval = new StaticValue (new BigDecimal (value.image), NumberType.GENERIC_NUMBER, createPosition(value));
      break;
      }
    case NULL:{
      value = jj_consume_token(NULL);
retval = new StaticValue (null, createPosition(value));
      break;
      }
    case L_BRACE:{
      jj_consume_token(L_BRACE);
retval = parseArray();
      jj_consume_token(R_BRACE);
      break;
      }
    case IDENTIFIER:{
      value = jj_consume_token(IDENTIFIER);
      switch (jj_nt.kind) {
      case L_PAREN:{
        jj_consume_token(L_PAREN);
retval = parseFunction(value.image, createPosition(value));
        jj_consume_token(R_PAREN);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
retval = new ContextLookup (value.image, createPosition(value));
      }
      break;
      }
    case L_PAREN:{
      jj_consume_token(L_PAREN);
retval = getExpression ();
      jj_consume_token(R_PAREN);
if (retval instanceof Term == false)
      {
        retval = new Term (retval);
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case PERCENT:{
      postfixOp = getPostfixOperator();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
if (postfixOp != null)
    {
      retval = new PostfixTerm(retval, postfixOp);
    }
    if (prefixOp != null)
    {
      retval = new PrefixTerm(prefixOp, retval);
    }
    {if ("" != null) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public LValue parseArray() throws ParseException {ArrayList rows = new ArrayList();
        LValue[] row = null;
    switch (jj_nt.kind) {
    case UNSIGNED_INTEGER:
    case L_PAREN:
    case L_BRACE:
    case PLUS:
    case MINUS:
    case NOT:
    case NULL:
    case IDENTIFIER:
    case STRING_LITERAL:
    case UNSIGNED_NUMERIC_LITERAL:{
      row = parseRow();
rows.add(row);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case PIPE:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(PIPE);
      row = parseRow();
// should we check here for column count equality to the first row column count?
                // or do we give this responsability to a DefaultDataTable constructor?
                        rows.add(row);
    }
LValue[][] table = (LValue[][])rows.toArray(new LValue[rows.size()][]);
                {if ("" != null) return new DefaultDataTable(table);}
    throw new Error("Missing return statement in function");
  }

  final public LValue[] parseRow() throws ParseException {ArrayList cols = new ArrayList();;
        LValue column = null;
    column = getExpression();
cols.add(column);
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(SEMICOLON);
      column = getExpression();
cols.add(column);
    }
{if ("" != null) return (LValue[]) cols.toArray(new LValue[cols.size()]);}
    throw new Error("Missing return statement in function");
  }

  final public LValue parseFunction(String name, ParsePosition parsePosition) throws ParseException {ArrayList params = new ArrayList();
   LValue parameter = null;
   Token value = null;
   boolean parameterExpected = false;
    switch (jj_nt.kind) {
    case UNSIGNED_INTEGER:
    case COMMA:
    case L_PAREN:
    case L_BRACE:
    case PLUS:
    case MINUS:
    case NOT:
    case NULL:
    case IDENTIFIER:
    case STRING_LITERAL:
    case UNSIGNED_NUMERIC_LITERAL:{
      switch (jj_nt.kind) {
      case COMMA:{
        value = jj_consume_token(COMMA);
parameterExpected = false;
           params.add(new StaticValue(null, createPosition(value)));
        break;
        }
      case UNSIGNED_INTEGER:
      case L_PAREN:
      case L_BRACE:
      case PLUS:
      case MINUS:
      case NOT:
      case NULL:
      case IDENTIFIER:
      case STRING_LITERAL:
      case UNSIGNED_NUMERIC_LITERAL:{
        parameter = getExpression();
parameterExpected = false;
           params.add(parameter);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        value = jj_consume_token(COMMA);
if (parameterExpected == true)
           {
             params.add(new StaticValue(null, createPosition(value)));
           }
           parameterExpected = true;
        switch (jj_nt.kind) {
        case UNSIGNED_INTEGER:
        case L_PAREN:
        case L_BRACE:
        case PLUS:
        case MINUS:
        case NOT:
        case NULL:
        case IDENTIFIER:
        case STRING_LITERAL:
        case UNSIGNED_NUMERIC_LITERAL:{
          parameter = getExpression();
params.add(parameter);
           parameterExpected = false;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          ;
        }
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
if (parameterExpected == true)
     {
       params.add(new StaticValue(null, createPosition(value)));
     }

     if (params == null)
     {
       {if ("" != null) return new FormulaFunction(name, new LValue[0], parsePosition);}
     }

     LValue[] paramVals = (LValue[]) params.toArray(new LValue[params.size()]);
     {if ("" != null) return new FormulaFunction(name, paramVals, parsePosition);}
    throw new Error("Missing return statement in function");
  }

  final public PrefixOperator getPrefixOperator() throws ParseException {Token value = null;
    switch (jj_nt.kind) {
    case PLUS:{
      value = jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      value = jj_consume_token(MINUS);
      break;
      }
    case NOT:{
      value = jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return getOperatorFactory().createPrefixOperator(value.image);}
    throw new Error("Missing return statement in function");
  }

  final public PostfixOperator getPostfixOperator() throws ParseException {Token value = null;
    value = jj_consume_token(PERCENT);
{if ("" != null) return getOperatorFactory().createPostfixOperator(value.image);}
    throw new Error("Missing return statement in function");
  }

  final public InfixOperator getInfixOperator() throws ParseException {InfixOperator op = null;
  Token value = null;
    switch (jj_nt.kind) {
    case PLUS:{
      value = jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      value = jj_consume_token(MINUS);
      break;
      }
    case MULT:{
      value = jj_consume_token(MULT);
      break;
      }
    case DIV:{
      value = jj_consume_token(DIV);
      break;
      }
    case POW:{
      value = jj_consume_token(POW);
      break;
      }
    case EQUALS:{
      value = jj_consume_token(EQUALS);
      break;
      }
    case NOT_EQUALS:{
      value = jj_consume_token(NOT_EQUALS);
      break;
      }
    case LT_EQUALS:{
      value = jj_consume_token(LT_EQUALS);
      break;
      }
    case GT_EQUALS:{
      value = jj_consume_token(GT_EQUALS);
      break;
      }
    case LT:{
      value = jj_consume_token(LT);
      break;
      }
    case GT:{
      value = jj_consume_token(GT);
      break;
      }
    case CONCAT:{
      value = jj_consume_token(CONCAT);
      break;
      }
    case AND:{
      value = jj_consume_token(AND);
      break;
      }
    case OR:{
      value = jj_consume_token(OR);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return getOperatorFactory().createInfixOperator(value.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_7()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(L_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(UNSIGNED_NUMERIC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GeneratedFormulaParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x19080100,0xf8000000,0xf8000000,0x18000000,0x80000,0x1080100,0x0,0x19080100,0x4000000,0x40000,0x19082100,0x2000,0x19080100,0x19082100,0x18000000,0xf8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xd8a00,0x1ff,0x1ff,0x200,0x0,0xd8000,0x400,0xd8200,0x0,0x0,0xd8200,0x0,0xd8200,0xd8200,0x200,0x1ff,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GeneratedFormulaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GeneratedFormulaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GeneratedFormulaParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GeneratedFormulaParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new GeneratedFormulaParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GeneratedFormulaParser(GeneratedFormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GeneratedFormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
